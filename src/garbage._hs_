fst3 (a,_,_) = a
snd3 (_,b,_) = b
trd3 (_,_,c) = c

isLongCmt (LongCmt _) = True
isLongCmt _           = False

isShortCmt (ShortCmt _) = True
isShortCmt _            = False

isCmt x = isShortCmt x || isLongCmt x

hltToString :: HighLevelToken -> String
hltToString (Code         s) = s
hltToString (ShortCmt     s) = s
hltToString (LongCmt      s) = s

-- factorize short comments until the end of the current line
factorizeShortCmtLine :: ParserState -> [LowLevelToken] -> [HighLevelToken]
                      -> [HighLevelToken]
factorizeShortCmtLine _ [] acc = acc -- caller will reverse acc
factorizeShortCmtLine state (tok:toks) acc =
    factorizeShortCmtLine state toks (factorize state tok acc)

lltToString :: LowLevelToken -> String
lltToString (CmtOrCodeOrString s) = s:[]
lltToString (CmtBegin          s) = s
lltToString (CmtEnd            s) = s
lltToString (LineCmtMark       s) = s
lltToString (StringBeginOrEnd  s) = s

-------------------------------------------------------------------------------
data Options = Help
             | Input String
             deriving Show

options :: [OptDescr Options]
options =
    [ Option ['h'] ["help"] (NoArg Help)        "user help"
    , Option ['r'] ["rc"]   (OptArg inp "FILE") "remove comments"
    , Option ['l'] ["llt"]  (OptArg inp "FILE") "low level tokenization"
    , Option ['h'] ["hlt"]  (OptArg inp "FILE") "high level tokenization"
    , Option ['t'] ["tc"]   (OptArg inp "FILE") "tokenize code"
    , Option ['c'] ["cc"]   (OptArg inp "FILE") "compress code"
    ]

inp :: Maybe String -> Options
inp  = Input  . fromMaybe "stdin"

compilerOpts :: [String] -> IO ([Options], [String])
compilerOpts argv =
   case getOpt Permute options argv of
      (o,n,[]  ) -> return (o,n)
      (_,_,errs) -> ioError (userError (concat errs ++ usageInfo header options))
  where header = "Usage: unpig [OPTION...] files..."
