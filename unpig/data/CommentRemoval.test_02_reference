[Code "module CommentRemoval ("]
[Code "    HighLevelToken,"]
[Code "    hltToString,"]
[Code "    isOnlyIndentationLine,"]
[Code "    rmCmtsWrapper,"]
[Code "    lowLevelTokenizeWrapper,"]
[Code "    highLevelTokenizeWrapper,"]
[Code ") where"]
[Code ""]
[Code "import Control.Exception"]
[Code "import Data.Char (isSpace)"]
[Code "import Data.Maybe"]
[Code "import Data.List"]
[Code "import System.IO"]
[Code ""]
[Code "type Token       = String"]
[Code "type CodeStr     = String"]
[Code "type ShortCmtStr = String"]
[Code "type LongCmtStr  = String"]
[Code ""]
[ShortCmt "-- A source file can be seen as a list of text lines. Each one"]
[ShortCmt "-- being made of different items :"]
[ShortCmt "-- source code, comments, comment delimiters, string constant, etc."]
[Code "data LowLevelToken = CmtOrCodeOrString Token"]
[Code "                   | CmtBegin          Token"]
[Code "                   | CmtEnd            Token"]
[Code "                   | LineCmtMark       Token"]
[Code "                   | StringBeginOrEnd  Token"]
[Code "                   | EscapedChar       Token"]
[Code "                   deriving Show"]
[Code ""]
[Code "data HighLevelToken = Code     CodeStr"]
[Code "                    | ShortCmt ShortCmtStr"]
[Code "                    | LongCmt  LongCmtStr"]
[Code "                    | StringInCode     CodeStr"]
[Code "                    | StringInShortCmt ShortCmtStr"]
[Code "                    | StringInLongCmt  LongCmtStr"]
[Code "                    deriving Show"]
[Code ""]
[Code "data ParserState = ReadingCode"]
[Code "                 | ReadingShortCmt"]
[Code "                 | ReadingLongCmt"]
[Code "                 | ReadingStringInCode"]
[Code "                 | ReadingStringInShortCmt"]
[Code "                 | ReadingStringInLongCmt"]
[Code "                 | ReadingEscCharInStringInCode"]
[Code "                 | ReadingEscCharInStringInShortCmt"]
[Code "                 | ReadingEscCharInStringInLongCmt"]
[Code "                 deriving Show"]
[Code ""]
[Code "lltToString :: LowLevelToken -> String"]
[Code "lltToString (CmtOrCodeOrString s) = s"]
[Code "lltToString (CmtBegin          s) = s"]
[Code "lltToString (CmtEnd            s) = s"]
[Code "lltToString (LineCmtMark       s) = s"]
[Code "lltToString (StringBeginOrEnd  s) = s"]
[Code "lltToString (EscapedChar       s) = s"]
[Code ""]
[Code "hltToString :: HighLevelToken -> String"]
[Code "hltToString (Code             s) = s"]
[Code "hltToString (ShortCmt         s) = s"]
[Code "hltToString (LongCmt          s) = s"]
[Code "hltToString (StringInCode     s) = s"]
[Code "hltToString (StringInShortCmt s) = s"]
[Code "hltToString (StringInLongCmt  s) = s"]
[Code ""]
[Code "isOnlyIndentationLine :: [HighLevelToken] -> Bool"]
[Code "isOnlyIndentationLine [] = False"]
[Code "isOnlyIndentationLine (x:[]) = isOnlyIndentation x"]
[Code "    where"]
[Code "      isOnlyIndentation (Code ",StringInCode "\"\"",Code ") = False"]
[Code "      isOnlyIndentation (Code str) = all isSpace str"]
[Code "      isOnlyIndentation _ = False"]
[Code "isOnlyIndentationLine _ = False"]
[Code ""]
[Code "promote :: ParserState -> LowLevelToken -> HighLevelToken"]
[Code "promote ReadingCode             (CmtOrCodeOrString x) = Code             x"]
[Code "promote ReadingShortCmt         (CmtOrCodeOrString x) = ShortCmt         x"]
[Code "promote ReadingLongCmt          (CmtOrCodeOrString x) = LongCmt          x"]
[Code "promote ReadingStringInCode     (CmtOrCodeOrString x) = StringInCode     x"]
[Code "promote ReadingStringInShortCmt (CmtOrCodeOrString x) = StringInShortCmt x"]
[Code "promote ReadingStringInLongCmt  (CmtOrCodeOrString x) = StringInLongCmt  x"]
[Code "promote ReadingCode             (StringBeginOrEnd  x) = StringInCode     x"]
[Code "promote ReadingShortCmt         (StringBeginOrEnd  x) = StringInShortCmt x"]
[Code "promote ReadingLongCmt          (StringBeginOrEnd  x) = StringInLongCmt  x"]
[Code "promote ReadingStringInCode     (StringBeginOrEnd  x) = StringInCode     x"]
[Code "promote ReadingStringInShortCmt (StringBeginOrEnd  x) = StringInShortCmt x"]
[Code "promote ReadingStringInLongCmt  (StringBeginOrEnd  x) = StringInLongCmt  x"]
[Code "promote ReadingStringInCode     (EscapedChar       x) = StringInCode     x"]
[Code "promote ReadingStringInShortCmt (EscapedChar       x) = StringInShortCmt x"]
[Code "promote ReadingStringInLongCmt  (EscapedChar       x) = StringInLongCmt  x"]
[Code "promote ReadingCode             (EscapedChar       x) ="]
[Code "    error (",StringInCode "\"while ReadingCode, got EscapedChar: \"",Code " ++ x)"]
[Code "promote ReadingShortCmt         (EscapedChar       x) ="]
[Code "    error (",StringInCode "\"while ReadingShortCmt, got EscapedChar: \"",Code " ++ x)"]
[Code "promote ReadingLongCmt          (EscapedChar       x) ="]
[Code "    error (",StringInCode "\"while ReadingLongCmt, got EscapedChar: \"",Code " ++ x)"]
[Code "promote ReadingEscCharInStringInCode               x  = StringInCode"]
[Code "                                                          (lltToString x)"]
[Code "promote ReadingEscCharInStringInShortCmt           x  = StringInShortCmt"]
[Code "                                                          (lltToString x)"]
[Code "promote ReadingEscCharInStringInLongCmt            x  = StringInLongCmt"]
[Code "                                                          (lltToString x)"]
[Code "promote _                       (CmtBegin          x) = LongCmt          x"]
[Code "promote _                       (CmtEnd            x) = LongCmt          x"]
[Code "promote ReadingStringInCode     (LineCmtMark       x) = StringInCode     x"]
[Code "promote _                       (LineCmtMark       x) = ShortCmt         x"]
[Code ""]
[Code "startWithList :: [Token] -> String -> Maybe Token"]
[ShortCmt "-- FBR: use a map/fold here instead of explicit recursion ?"]
[Code "startWithList [] _ = Nothing"]
[Code "startWithList (prfx:others) str"]
[Code "    | isPrefixOf prfx str = Just prfx"]
[Code "    | otherwise           = startWithList others str"]
[Code ""]
[ShortCmt "-- the remaining string is modified by a token or by a letter consumption"]
[Code "firstMatchedTok :: String"]
[Code "                -> [Token] -> [Token] -> [Token] -> [Token] -> [Token]"]
[Code "                -> Maybe (LowLevelToken, String)"]
[Code "firstMatchedTok [] _ _ _ _ _ = Nothing"]
[Code "firstMatchedTok str@(c:cs) cmtStarters cmtStopers shortCmtStarters"]
[Code "                stringDelims escChars ="]
[Code "    case startWithList escChars str of"]
[Code "      Just matched ->"]
[Code "          Just (EscapedChar matched"]
[Code "               ,consumeTokenUnsafe matched str)"]
[Code "      Nothing ->"]
[Code "          case startWithList stringDelims str of"]
[Code "            Just matched ->"]
[Code "                Just (StringBeginOrEnd matched"]
[Code "                     ,consumeTokenUnsafe matched str)"]
[Code "            Nothing ->"]
[Code "                case startWithList cmtStarters str of"]
[Code "                  Just matched ->"]
[Code "                      Just (CmtBegin matched"]
[Code "                           ,consumeTokenUnsafe matched str)"]
[Code "                  Nothing ->"]
[Code "                      case startWithList cmtStopers str of"]
[Code "                        Just matched ->"]
[Code "                            Just (CmtEnd matched"]
[Code "                                 ,consumeTokenUnsafe matched str)"]
[Code "                        Nothing ->"]
[Code "                            case startWithList shortCmtStarters str of"]
[Code "                              Just matched ->"]
[Code "                                  Just (LineCmtMark matched"]
[Code "                                       ,consumeTokenUnsafe matched str)"]
[Code "                              Nothing -> Just (CmtOrCodeOrString (c:[])"]
[Code "                                              ,cs)"]
[Code "    where"]
[Code "      ",ShortCmt "-- !!! tok _MUST_ be a prefix of str !!!"]
[Code "      consumeTokenUnsafe :: Token -> String -> String"]
[Code "      consumeTokenUnsafe tok tokPrefixedStr = drop (length tok) tokPrefixedStr"]
[Code ""]
[ShortCmt "-- line to list of tokens"]
[Code "tokenizeSrcLine :: Bool"]
[Code "                -> [Token] -> [Token] -> [Token] -> [Token] -> [Token]"]
[Code "                -> [LowLevelToken] -> String -> [LowLevelToken]"]
[ShortCmt "-- empty line in source file"]
[Code "tokenizeSrcLine _ _ _ _ _ _ _ ",StringInCode "\"\"",Code " = (CmtOrCodeOrString ",StringInCode "\"\"",Code "):[]"]
[ShortCmt "-- non empty line"]
[Code "tokenizeSrcLine escaping"]
[Code "                cmtStarters cmtStopers shortCmtStarters stringDelims escChars"]
[Code "                acc srcLine ="]
[Code "    case firstMatchedTok srcLine cmtStarters cmtStopers shortCmtStarters"]
[Code "                         stringDelims escChars of"]
[Code "      Nothing -> reverse acc"]
[Code "      Just (tok, []) -> reverse (factorize escaping tok acc)"]
[Code "      Just (tok, remaining@(_:_)) ->"]
[Code "          case tok of"]
[Code "            EscapedChar _ ->"]
[Code "                tokenizeSrcLine (xor True escaping)"]
[Code "                                cmtStarters cmtStopers shortCmtStarters"]
[Code "                                stringDelims escChars"]
[Code "                                (factorize escaping tok acc) remaining"]
[Code "            _ ->"]
[Code "                tokenizeSrcLine False"]
[Code "                                cmtStarters cmtStopers shortCmtStarters"]
[Code "                                stringDelims escChars"]
[Code "                                (factorize escaping tok acc) remaining"]
[Code "    where"]
[Code "      factorize :: Bool -> LowLevelToken -> [LowLevelToken] -> [LowLevelToken]"]
[Code "      factorize _ elt [] = elt:[]"]
[Code "      factorize escaping' elt lst@(x:xs)"]
[Code "          | escaping' ="]
[Code "              case x of"]
[Code "                (EscapedChar z) ->"]
[Code "                    (EscapedChar (z ++ (lltToString elt))):xs"]
[Code "                _ -> error (",StringInCode "\"x is not an EscapedChar while we are escaping: \""]
[Code "                            ++ (lltToString elt))"]
[Code "          | otherwise ="]
[Code "              case (elt, x) of"]
[Code "                (CmtOrCodeOrString y, CmtOrCodeOrString z) ->"]
[Code "                    (CmtOrCodeOrString (z ++ y)):xs"]
[Code "                (CmtBegin y, CmtBegin z) ->"]
[Code "                    (CmtBegin (z ++ y)):xs"]
[Code "                (CmtEnd y, CmtEnd z) ->"]
[Code "                    (CmtEnd (z ++ y)):xs"]
[Code "                (LineCmtMark y, LineCmtMark z) ->"]
[Code "                    (LineCmtMark (z ++ y)):xs"]
[Code "                ",ShortCmt "-- consecutive StringBeginOrEnd low level tokens must not be"]
[Code "                ",ShortCmt "-- factorized together to manage correctly the empty string ",StringInShortCmt "\"\""]
[Code "                _ -> elt:lst"]
[Code ""]
[Code "xor :: Bool -> Bool -> Bool"]
[Code "xor True True = False"]
[Code "xor _ _ = True"]
[Code ""]
[ShortCmt "-- file name to list of lines read"]
[Code "getLines :: String -> IO [String]"]
[Code "getLines fileName ="]
[Code "    do mfh <- try (openFile fileName ReadMode)"]
[Code "       case mfh of"]
[Code "         Left err -> do print err"]
[Code "                        return []"]
[Code "         Right h ->"]
[Code "             do getLines' h []"]
[Code "    where"]
[Code "      getLines' :: Handle -> [String] -> IO [String]"]
[Code "      getLines' h acc ="]
[Code "          do mline <- try (hGetLine h)"]
[Code "             case mline of"]
[Code "               Left _ -> return (reverse acc)"]
[Code "               Right line -> getLines' h (line:acc)"]
[Code ""]
[ShortCmt "-- file name to list of low level tokens"]
[Code "tokenizeFile :: String -> [Token] -> [Token] -> [Token] -> [Token] -> [Token]"]
[Code "             -> IO [[LowLevelToken]]"]
[Code "tokenizeFile fileName cmtStarters cmtStopers shortCmtStarters stringDelims"]
[Code "             escChars ="]
[Code "    do readLines <- getLines fileName"]
[Code "       return (map (tokenizeSrcLine False"]
[Code "                                    cmtStarters cmtStopers shortCmtStarters"]
[Code "                                    stringDelims escChars [])"]
[Code "                   readLines)"]
[Code ""]
[ShortCmt "-- low to high level tokens"]
[Code "highLevelTokens :: [[LowLevelToken]] -> ParserState -> Int"]
[Code "                -> [HighLevelToken] -> [[HighLevelToken]]"]
[Code "                -> [[HighLevelToken]]"]
[Code "highLevelTokens [] _ _ _ acc = reverse acc"]
[Code "highLevelTokens (line:others) parserState depth lineAcc acc ="]
[Code "    case line of"]
[Code "      ",ShortCmt "-- finished current line"]
[Code "      [] -> case parserState of"]
[Code "              ReadingShortCmt ->"]
[Code "                  ",ShortCmt "-- state only valid until end of current line"]
[Code "                  highLevelTokens others ReadingCode"]
[Code "                                  depth [] ((reverse lineAcc):acc)"]
[Code "              _ ->"]
[Code "                  highLevelTokens others parserState"]
[Code "                                  depth [] ((reverse lineAcc):acc)"]
[Code "      ",ShortCmt "-- continuing current line"]
[Code "      (tok:toks) ->"]
[Code "          case parserState of"]
[Code "            ReadingCode ->"]
[Code "                case tok of"]
[Code "                  CmtOrCodeOrString _ ->"]
[Code "                      highLevelTokens"]
[Code "                         (toks:others) parserState"]
[Code "                         depth (factorize parserState tok lineAcc) acc"]
[Code "                  LineCmtMark _ ->"]
[Code "                      highLevelTokens"]
[Code "                         (toks:others) ReadingShortCmt"]
[Code "                         depth (factorize ReadingShortCmt tok lineAcc) acc"]
[Code "                  CmtBegin _ ->"]
[Code "                      highLevelTokens"]
[Code "                         (toks:others) ReadingLongCmt"]
[Code "                         (depth+1) (factorize parserState tok lineAcc) acc"]
[Code "                  StringBeginOrEnd _ ->"]
[Code "                      highLevelTokens"]
[Code "                         (toks:others) ReadingStringInCode"]
[Code "                         depth (factorize parserState tok lineAcc) acc"]
[Code "                  CmtEnd mark ->"]
[Code "                      error (",StringInCode "\"got EndCmtMArk while ReadingCode: \"",Code " ++ mark)"]
[Code "                  EscapedChar esc ->"]
[Code "                      error (",StringInCode "\"got EscapedChar while ReadingCode: \"",Code " ++ esc)"]
[Code "            ReadingShortCmt ->"]
[Code "                case tok of"]
[Code "                  StringBeginOrEnd _ ->"]
[Code "                      highLevelTokens"]
[Code "                         (toks:others) ReadingStringInShortCmt"]
[Code "                         depth (factorize parserState tok lineAcc) acc"]
[Code "                  EscapedChar esc ->"]
[Code "                      error (",StringInCode "\"got EscapedChar while ReadingShortCmt: \"",Code " ++ esc)"]
[Code "                  _ ->"]
[Code "                      highLevelTokens"]
[Code "                         (toks:others) parserState"]
[Code "                         depth (factorize parserState tok lineAcc) acc"]
[Code "            ReadingLongCmt ->"]
[Code "                case tok of"]
[Code "                  CmtEnd _ ->"]
[Code "                      let newDepth = depth - 1 in"]
[Code "                      if newDepth == 0 then"]
[Code "                          highLevelTokens"]
[Code "                             (toks:others) ReadingCode"]
[Code "                             newDepth (factorize parserState tok lineAcc) acc"]
[Code "                      else"]
[Code "                          highLevelTokens"]
[Code "                            (toks:others) parserState"]
[Code "                            newDepth (factorize parserState tok lineAcc) acc"]
[Code "                  CmtBegin _ ->"]
[Code "                      let newDepth = depth + 1 in"]
[Code "                      highLevelTokens"]
[Code "                         (toks:others) parserState"]
[Code "                         newDepth (factorize parserState tok lineAcc) acc"]
[Code "                  CmtOrCodeOrString _ ->"]
[Code "                      highLevelTokens"]
[Code "                         (toks:others) parserState"]
[Code "                         depth (factorize parserState tok lineAcc) acc"]
[Code "                  LineCmtMark mark ->"]
[Code "                      error (",StringInCode "\"got LineCmtMark while ReadingLongCmt: \"",Code " ++ mark)"]
[Code "                  StringBeginOrEnd _ ->"]
[Code "                      highLevelTokens"]
[Code "                         (toks:others) ReadingStringInLongCmt"]
[Code "                         depth (factorize parserState tok lineAcc) acc"]
[Code "                  EscapedChar esc ->"]
[Code "                      error (",StringInCode "\"got EscapedChar while ReadingLongCmt: \"",Code " ++ esc)"]
[Code "            ReadingStringInLongCmt ->"]
[Code "                case tok of"]
[Code "                  StringBeginOrEnd _ ->"]
[Code "                      highLevelTokens"]
[Code "                         (toks:others) ReadingLongCmt"]
[Code "                         depth (factorize parserState tok lineAcc) acc"]
[Code "                  EscapedChar _ ->"]
[Code "                      highLevelTokens"]
[Code "                         (toks:others) ReadingEscCharInStringInLongCmt"]
[Code "                         depth (factorize parserState tok lineAcc) acc"]
[Code "                  _ ->"]
[Code "                      highLevelTokens"]
[Code "                         (toks:others) parserState"]
[Code "                         depth (factorize parserState tok lineAcc) acc"]
[Code "            ReadingStringInShortCmt ->"]
[Code "                case tok of"]
[Code "                  StringBeginOrEnd _ ->"]
[Code "                      highLevelTokens"]
[Code "                         (toks:others) ReadingShortCmt"]
[Code "                         depth (factorize parserState tok lineAcc) acc"]
[Code "                  EscapedChar _ ->"]
[Code "                      highLevelTokens"]
[Code "                         (toks:others) ReadingEscCharInStringInShortCmt"]
[Code "                         depth (factorize parserState tok lineAcc) acc"]
[Code "                  _ ->"]
[Code "                      highLevelTokens"]
[Code "                         (toks:others) parserState"]
[Code "                         depth (factorize parserState tok lineAcc) acc"]
[Code "            ReadingStringInCode ->"]
[Code "                case tok of"]
[Code "                  StringBeginOrEnd _ ->"]
[Code "                      highLevelTokens"]
[Code "                         (toks:others) ReadingCode"]
[Code "                         depth (factorize parserState tok lineAcc) acc"]
[Code "                  EscapedChar _ ->"]
[Code "                      highLevelTokens"]
[Code "                         (toks:others) ReadingEscCharInStringInCode"]
[Code "                         depth (factorize parserState tok lineAcc) acc"]
[Code "                  _ ->"]
[Code "                      highLevelTokens"]
[Code "                         (toks:others) parserState"]
[Code "                         depth (factorize parserState tok lineAcc) acc"]
[Code "            ReadingEscCharInStringInCode ->"]
[Code "                case tok of"]
[Code "                  StringBeginOrEnd _ ->"]
[Code "                      highLevelTokens"]
[Code "                         (toks:others) ReadingCode"]
[Code "                         depth (factorize parserState tok lineAcc) acc"]
[Code "                  _ ->"]
[Code "                      highLevelTokens"]
[Code "                         (toks:others) ReadingStringInCode"]
[Code "                         depth (factorize parserState tok lineAcc) acc"]
[Code "            ReadingEscCharInStringInShortCmt ->"]
[Code "                case tok of"]
[Code "                  StringBeginOrEnd _ ->"]
[Code "                      highLevelTokens"]
[Code "                         (toks:others) ReadingShortCmt"]
[Code "                         depth (factorize parserState tok lineAcc) acc"]
[Code "                  _ ->"]
[Code "                      highLevelTokens"]
[Code "                         (toks:others) ReadingStringInShortCmt"]
[Code "                         depth (factorize parserState tok lineAcc) acc"]
[Code "            ReadingEscCharInStringInLongCmt ->"]
[Code "                case tok of"]
[Code "                  StringBeginOrEnd _ ->"]
[Code "                      highLevelTokens"]
[Code "                         (toks:others) ReadingLongCmt"]
[Code "                         depth (factorize parserState tok lineAcc) acc"]
[Code "                  _ ->"]
[Code "                      highLevelTokens"]
[Code "                         (toks:others) ReadingStringInLongCmt"]
[Code "                         depth (factorize parserState tok lineAcc) acc"]
[Code "    where"]
[Code "      factorize :: ParserState -> LowLevelToken -> [HighLevelToken]"]
[Code "                -> [HighLevelToken]"]
[Code "      factorize state elt [] = (promote state elt):[]"]
[Code "      factorize state elt lst@(x:xs) ="]
[Code "        let elt' = promote state elt in"]
[Code "        case (x, elt') of"]
[Code "          (Code y, Code z) -> (Code (y ++ z)):xs"]
[Code "          (ShortCmt y, ShortCmt z) -> (ShortCmt (y ++ z)):xs"]
[Code "          (LongCmt y, LongCmt z) -> (LongCmt (y ++ z)):xs"]
[Code "          (StringInCode y, StringInCode z) -> (StringInCode (y ++ z)):xs"]
[Code "          (StringInShortCmt y, StringInShortCmt z) ->"]
[Code "              (StringInShortCmt (y ++ z)):xs"]
[Code "          (StringInLongCmt y, StringInLongCmt z) ->"]
[Code "              (StringInLongCmt (y ++ z)):xs"]
[Code "          _ -> elt':lst"]
[Code ""]
[Code "rmCmtsWrapper :: String -> IO [[HighLevelToken]]"]
[Code "rmCmtsWrapper fileName ="]
[Code "    do lowLevelToks <- tokenizeFile fileName [] [] [",StringInCode "\"--\"",Code "] [",StringInCode "\"\\\"\"",Code "] [",StringInCode "\"\\\\\"",Code "]"]
[Code "       let highLevelToks = highLevelTokens lowLevelToks ReadingCode 0 [] []"]
[Code "           codeOnly = removeComments highLevelToks"]
[Code "       return codeOnly"]
[Code "    where"]
[Code "      removeComments :: [[HighLevelToken]] -> [[HighLevelToken]]"]
[Code "      removeComments srcLine = map (filter isCode) srcLine"]
[Code ""]
[Code "      isCode :: HighLevelToken -> Bool"]
[Code "      isCode (Code _)         = True"]
[Code "      isCode (StringInCode _) = True"]
[Code "      isCode _                = False"]
[Code ""]
[Code "lowLevelTokenizeWrapper :: String -> IO [[LowLevelToken]]"]
[Code "lowLevelTokenizeWrapper fileName ="]
[Code "    do lowLevelToks <- tokenizeFile fileName [] [] [",StringInCode "\"--\"",Code "] [",StringInCode "\"\\\"\"",Code "] [",StringInCode "\"\\\\\"",Code "]"]
[Code "       return lowLevelToks"]
[Code ""]
[Code "highLevelTokenizeWrapper :: String -> IO [[HighLevelToken]]"]
[Code "highLevelTokenizeWrapper fileName ="]
[Code "    do lowLevelToks <- tokenizeFile fileName [] [] [",StringInCode "\"--\"",Code "] [",StringInCode "\"\\\"\"",Code "] [",StringInCode "\"\\\\\"",Code "]"]
[Code "       let highLevelToks = highLevelTokens lowLevelToks ReadingCode 0 [] []"]
[Code "       return highLevelToks"]
